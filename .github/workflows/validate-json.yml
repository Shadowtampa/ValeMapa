name: Validar JSON das Localiza√ß√µes

on:
  push:
    paths:
      - 'public/places.json'
  pull_request:
    paths:
      - 'public/places.json'

jobs:
  validate-json:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
      
    - name: Validar JSON
      run: |
        echo "üîç Validando estrutura do JSON..."
        node -e "
          try {
            const data = JSON.parse(require('fs').readFileSync('public/places.json', 'utf8'));
            
            if (!data.places || !Array.isArray(data.places)) {
              throw new Error('Estrutura inv√°lida: deve ter um array "places"');
            }
            
            console.log('‚úÖ JSON v√°lido!');
            console.log('üìä Total de localiza√ß√µes:', data.places.length);
            
            // Verificar IDs √∫nicos
            const ids = data.places.map(p => p.id);
            const uniqueIds = [...new Set(ids)];
            
            if (ids.length !== uniqueIds.length) {
              throw new Error('IDs duplicados encontrados!');
            }
            
            console.log('‚úÖ Todos os IDs s√£o √∫nicos');
            
            // Verificar estrutura b√°sica
            data.places.forEach((place, index) => {
              const required = ['id', 'name', 'address', 'city', 'state', 'coordinates', 'category'];
              const missing = required.filter(field => !place[field]);
              
              if (missing.length > 0) {
                throw new Error(\`Localiza√ß√£o \${index + 1} (ID: \${place.id}) est√° faltando: \${missing.join(', ')}\`);
              }
              
              if (!place.coordinates.lat || !place.coordinates.lng) {
                throw new Error(\`Localiza√ß√£o \${index + 1} (ID: \${place.id}) tem coordenadas inv√°lidas\`);
              }
            });
            
            console.log('‚úÖ Todas as localiza√ß√µes t√™m estrutura v√°lida');
            
          } catch (error) {
            console.error('‚ùå Erro na valida√ß√£o:', error.message);
            process.exit(1);
          }
        "
        
    - name: Verificar formata√ß√£o
      run: |
        echo "üé® Verificando formata√ß√£o..."
        node -e "
          const fs = require('fs');
          const original = fs.readFileSync('public/places.json', 'utf8');
          const formatted = JSON.stringify(JSON.parse(original), null, 2);
          
          if (original !== formatted) {
            console.log('‚ö†Ô∏è  JSON n√£o est√° formatado corretamente');
            console.log('üí° Execute: npm run format ou formate manualmente');
          } else {
            console.log('‚úÖ Formata√ß√£o est√° correta');
          }
        "
        
    - name: Relat√≥rio de Valida√ß√£o
      run: |
        echo "üìã Relat√≥rio de Valida√ß√£o"
        echo "========================"
        echo "‚úÖ JSON sintaticamente v√°lido"
        echo "‚úÖ Estrutura de dados correta"
        echo "‚úÖ IDs √∫nicos verificados"
        echo "‚úÖ Coordenadas presentes"
        echo "‚úÖ Campos obrigat√≥rios preenchidos"
        echo ""
        echo "üéâ Valida√ß√£o conclu√≠da com sucesso!" 